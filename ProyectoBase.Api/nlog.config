<?xml version="1.0" encoding="utf-8" ?>
<nlog xmlns="http://www.nlog-project.org/schemas/NLog.xsd"
      xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
      autoReload="true"
      internalLogLevel="Warn"
      internalLogFile="${basedir}/logs/internal-nlog.log">
  <extensions>
    <add assembly="NLog.Web.AspNetCore" />
  </extensions>

  <variable name="LogDirectory" value="${environment:variable=NLOG_LOG_DIRECTORY:whenEmpty=${basedir}/logs}" />
  <variable name="MinLogLevel" value="${environment:variable=NLOG_MINLEVEL:whenEmpty=Info}" />
  <variable name="SanitizePattern" value="(?i)(token|secret|password|apikey)(\s*[:=]\s*)([^\s\"',;]+)" />

  <targets>
    <target xsi:type="Console" name="console" detectConsoleAvailable="true">
      <layout xsi:type="JsonLayout" includeAllProperties="false">
        <attribute name="timestamp" layout="${longdate}" />
        <attribute name="level" layout="${uppercase:${level}}" />
        <attribute name="logger" layout="${logger}" />
        <attribute name="message" layout="${replace:inner=${message:raw=true}:regex=${var:SanitizePattern}:replacement=${1}${2}***}" />
        <attribute name="properties"
                   layout="${replace:inner=${all-event-properties:format=Json}:regex=${var:SanitizePattern}:replacement=${1}${2}***}"
                   includeEmptyValue="false" />
        <attribute name="scopes" layout="${scopejson}" includeEmptyValue="false" />
        <attribute name="requestId" layout="${aspnet-traceidentifier}" includeEmptyValue="false" />
        <attribute name="requestPath" layout="${aspnet-request-url:IncludeQueryString=true}" includeEmptyValue="false" />
        <attribute name="requestHeaders"
                   layout="${replace:inner=${aspnet-request-headers:OutputFormat=Json}:regex=(?i)(authorization\"\s*:\s*\")(.*?)(\")|replacement=${1}***${3}}"
                   includeEmptyValue="false" />
        <attribute name="exception" layout="${exception:format=ToString}" includeEmptyValue="false" />
      </layout>
    </target>

    <target xsi:type="File" name="file" fileName="${LogDirectory}/${shortdate}.log" concurrentWrites="false" keepFileOpen="false">
      <layout xsi:type="JsonLayout" includeAllProperties="false">
        <attribute name="timestamp" layout="${longdate}" />
        <attribute name="level" layout="${uppercase:${level}}" />
        <attribute name="logger" layout="${logger}" />
        <attribute name="message" layout="${replace:inner=${message:raw=true}:regex=${var:SanitizePattern}:replacement=${1}${2}***}" />
        <attribute name="properties"
                   layout="${replace:inner=${all-event-properties:format=Json}:regex=${var:SanitizePattern}:replacement=${1}${2}***}"
                   includeEmptyValue="false" />
        <attribute name="scopes" layout="${scopejson}" includeEmptyValue="false" />
        <attribute name="requestId" layout="${aspnet-traceidentifier}" includeEmptyValue="false" />
        <attribute name="requestPath" layout="${aspnet-request-url:IncludeQueryString=true}" includeEmptyValue="false" />
        <attribute name="requestHeaders"
                   layout="${replace:inner=${aspnet-request-headers:OutputFormat=Json}:regex=(?i)(authorization\"\s*:\s*\")(.*?)(\")|replacement=${1}***${3}}"
                   includeEmptyValue="false" />
        <attribute name="exception" layout="${exception:format=ToString}" includeEmptyValue="false" />
      </layout>
    </target>
  </targets>

  <rules>
    <logger name="*" minlevel="${var:MinLogLevel}" writeTo="console">
      <filters>
        <when condition="equals('${aspnet-environment}','Development')" action="Log" />
        <default action="Ignore" />
      </filters>
    </logger>

    <logger name="*" minlevel="${var:MinLogLevel}" writeTo="console,file">
      <filters>
        <when condition="equals('${aspnet-environment}','Staging')" action="Log" />
        <default action="Ignore" />
      </filters>
    </logger>

    <logger name="*" minlevel="${var:MinLogLevel}" writeTo="file">
      <filters>
        <when condition="equals('${aspnet-environment}','Production')" action="Log" />
        <default action="Ignore" />
      </filters>
    </logger>

    <logger name="*" minlevel="${var:MinLogLevel}" writeTo="console">
      <filters>
        <when condition="not(equals('${aspnet-environment}','Development') or equals('${aspnet-environment}','Staging') or equals('${aspnet-environment}','Production'))" action="Log" />
        <default action="Ignore" />
      </filters>
    </logger>
  </rules>
</nlog>
